import os
from datetime import datetime

from dotenv import load_dotenv
from telegram import (Bot, KeyboardButton, ReplyKeyboardMarkup,
                      ReplyKeyboardRemove, Update, update)
from telegram.ext import (CallbackContext, CommandHandler, ConversationHandler,
                          Filters, MessageHandler, Updater)

load_dotenv()

contact_keyboard = KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç', request_contact=True)
location_keyboard = KeyboardButton('–†—É—á–Ω–æ–π –≤–≤–æ–¥')
make_order_button = KeyboardButton('–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑')
all_orders_button = KeyboardButton('–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤')
custom_keyboard = [[contact_keyboard, location_keyboard]]
make_order = [[make_order_button]]

MAKE_ORDER_KEYBOARD = ReplyKeyboardMarkup(make_order, resize_keyboard=True)
SEND_CONTACT_KEYBOARD = ReplyKeyboardMarkup(custom_keyboard, resize_keyboard=True)
START_KEYBOARD = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text='–°–æ–≥–ª–∞—Å–µ–Ω'), KeyboardButton(text='–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω')
        ],
        ],
        resize_keyboard=True
        )


LEVELS_KEYBOARD = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text='1 –£—Ä–æ–≤–µ–Ω—å')
        ],
        [
            KeyboardButton(text='2 –£—Ä–æ–≤–Ω—è')
        ],
        [
            KeyboardButton(text='3 –£—Ä–æ–≤–Ω—è')
        ],
        ],
        resize_keyboard=True
        )


def start(update, context):
    message = update.message
    user_name = message.chat.first_name
    user_id = message.chat_id
    context.user_data["user_name"] = user_name
    context.user_data["user_id"] = user_id
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥

    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=(
            f"–ü—Ä–∏–≤–µ—Ç, {user_name}.ü§ö\n\n"
            "–í –Ω–∞—á–∞–ª–µ –Ω–∞—à–µ–≥–æ –æ–±—â–µ–Ω–∏—è —è –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –æ—Ç –≤–∞—Å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º—ã—Ö"
            "–≤–∞–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, —Å —Ü–µ–ª—å—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è.\n\n"
            "–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É '–°–æ–≥–ª–∞—Å–µ–Ω' –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–≤–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∏–º–∏ –≤ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ"
        ),
            reply_markup=START_KEYBOARD,
    )
    context.bot.send_document(
        chat_id=update.effective_chat.id,
        document=open('Agree.pdf', 'rb')
    )
    return 1


def check_agreement(update, context):
    if update.message.text == "–°–æ–≥–ª–∞—Å–µ–Ω":
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=("–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"),
            reply_markup=SEND_CONTACT_KEYBOARD
        )
        return 2
    else:
        update.message.reply_text("–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ä–≤–∏—Å–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–µ—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"),
        return 1


def ask_contacts(update, context):
    message = update.message
    
    if message.contact:
        phone_number = message.contact.phone_number
        text = (
            f"–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä {phone_number} —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω."
            "–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:"
        )
        message.reply_text(
            text,
            reply_markup=ReplyKeyboardRemove()
        )
        return 4

    elif message.text == "–†—É—á–Ω–æ–π –≤–≤–æ–¥":
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +71231231212"),
            reply_markup=ReplyKeyboardRemove(),
        )
        return 3


def ask_address(update, context):
    address = update.message.text
    context.user_data["address"] = address
    update.message.reply_text(
        f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏, {address}, —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫–æ–Ω—á–µ–Ω–∞."
    )
    return main_menu(update, context)


def check_phone_number(update, context):
    phone_number = update.message.text
    
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=(
            f"–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {phone_number} —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n "
            "–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:"
        ),
        reply_markup=ReplyKeyboardRemove(),
    )
    return 4


def select_levels(update, context):
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–≤–Ω–µ–π —Ç–æ—Ä—Ç–∏–∫–∞"),
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(text='1 –£—Ä–æ–≤–µ–Ω—å')
                ],
                [
                    KeyboardButton(text='2 –£—Ä–æ–≤–Ω—è')
                ],
                [
                    KeyboardButton(text='3 –£—Ä–æ–≤–Ω—è')
                ],
                [
                    KeyboardButton(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
                ],
            ],
        resize_keyboard=True
        ),
    )
    return 5


def select_shape(update, context):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–≤–Ω–µ–π –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ —à–∞–≥–∞
    levels = update.message.text
    

    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É"),
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(text='–ö–≤–∞–¥—Ä–∞—Ç')
                ],
                [
                    KeyboardButton(text='–ö—Ä—É–≥')
                ],
                [
                    KeyboardButton(text='–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫')
                ],
                [
                KeyboardButton(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
                ],
            ],
        resize_keyboard=True
        ),
    )
    return 6


def select_toppings(update, context):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –í—ã–±—Ä–∞–Ω–Ω—É—é —Ñ–æ—Ä–º—É –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ —à–∞–≥–∞
    shape = update.message.text
    
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ø–ø–∏–Ω–≥"),
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(text='–ë–µ–∑ —Ç–æ–ø–ø–∏–Ω–≥–∞')
                ],
                [
                    KeyboardButton(text='–ë–µ–ª—ã–π —Å–æ—É—Å')
                ],
                [
                    KeyboardButton(text='–ö–∞—Ä–∞–º–µ–ª—å–Ω—ã–π —Å–∏—Ä–æ–ø')
                ],
                [
                    KeyboardButton(text='–ö–ª–µ–Ω–æ–≤—ã–π —Å–∏—Ä–æ–ø')
                ],
                [
                    KeyboardButton(text='–ö–ª—É–±–Ω–∏—á–Ω—ã–π —Å–∏—Ä–æ–ø')
                ],
                [
                    KeyboardButton(text='–ß–µ—Ä–Ω–∏—á–Ω—ã–π —Å–∏—Ä–æ–ø')
                ],
                [
                    KeyboardButton(text='–ú–æ–ª–æ—á–Ω—ã–π —à–æ–∫–æ–ª–∞–¥')
                ],
                
            ],
        resize_keyboard=True
        ),
    )
    return 7


def select_berries(update, context):
    topping = update.message.text
    
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=("–î–æ–±–∞–≤–∏—Ç—å —è–≥–æ–¥—ã?"),
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(text='–ë–µ–∑ —è–≥–æ–¥')
                ],
                [
                    KeyboardButton(text='–ï–∂–µ–≤–∏–∫–∞')
                ],
                [
                    KeyboardButton(text='–ú–∞–ª–∏–Ω–∞')
                ],
                [
                    KeyboardButton(text='–ì–æ–ª—É–±–∏–∫–∞')
                ],
                [
                    KeyboardButton(text='–ö–ª—É–±–Ω–∏–∫–∞')
                ],
            ],
        resize_keyboard=True
        ),
    )
    return 8


def select_decor(update, context):
    berry = update.message.text
    
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=("–ö–∞–∫ —É–∫—Ä–∞—Å–∏—Ç—å?"),
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(text='–ë–µ–∑ –¥–µ–∫–æ—Ä–∞')
                ],
                [
                    KeyboardButton(text='–§–∏—Å—Ç–∞—à–∫–∏')
                ],
                [
                    KeyboardButton(text='–ë–µ–∑–µ')
                ],
                [
                    KeyboardButton(text='–§—É–Ω–¥—É–∫')
                ],
                [
                    KeyboardButton(text='–ü–µ–∫–∞–Ω')
                ],
                [
                    KeyboardButton(text='–ú–∞—Ä—à–º–µ–ª–ª–æ—É')
                ],
                [
                    KeyboardButton(text='–ú–∞—Ä—Ü–∏–ø–∞–Ω')
                ],
            ],
        resize_keyboard=True
        ),
    )
    return 9


def select_print(update, context):
    decor = update.message.text
    
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=("–ú—ã –º–æ–∂–µ–º —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –Ω–∞ —Ç–æ—Ä—Ç–µ –ª—é–±—É—é –Ω–∞–¥–ø–∏—Å—å, –Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–° –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è!¬ª"),
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–¥–ø–∏—Å—å')
                ],
                [
                    KeyboardButton(text='–ë–µ–∑ –Ω–∞–¥–ø–∏—Å–∏')
                ],
            ],
        resize_keyboard=True
        ),
    )
    return 10


def check_print_selection(update, context):
    if update.message.text == '–ë–µ–∑ –Ω–∞–¥–ø–∏—Å–∏':
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)"),
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [
                        KeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π')
                    ],
                    [
                        KeyboardButton(text='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
                    ],
                ],
            resize_keyboard=True
            ),
        )
        return 12
    
    elif update.message.text == '–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–¥–ø–∏—Å—å':
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–¥–ø–∏—Å—å:"),
    )
    return 11


def save_print(update, context):
    cake_print = update.message.text

    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)"),
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π')
                ],
                [
                    KeyboardButton(text='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
                ],
            ],
        resize_keyboard=True
        ),
    )
    return 12


def ask_comment(update, context):
    if update.message.text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        address = context.user_data["address"]

        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=(f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ {address}?"),
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [
                        KeyboardButton(text='–î–∞'),
                        KeyboardButton(text='–ù–µ—Ç'),
                    ],
                ],
            resize_keyboard=True
            ),
        )
        return 14
    elif update.message.text == '–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π':
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=("–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"),
        )
        return 13


def save_comment(update, context):
    comment = update.message.text
    address = context.user_data["address"]

    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=(f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ {address}?"),
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(text='–î–∞'),
                    KeyboardButton(text='–ù–µ—Ç'),
                ],
            ],
            resize_keyboard=True,
        )
    )
    return 14


def check_address(update, context):
    if update.message.text == "–î–∞":
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=(f"–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥"),
        )
        return 16
    elif update.message.text == "–ù–µ—Ç":
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=(f"–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:"),
        )
        return 15


def save_address(update, context):
    context.user_data["address"] = update.message.text
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=(f"–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –∏ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥:"),
        reply_markup=ReplyKeyboardRemove(),
    )
    return 16


def ask_delivery_time(update, context):
    delivery_time = update.message.text


def main_menu(update, context):
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=(f"–î–∞–≤–∞–π —Å–æ–±–∏—Ä–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ—Ä—Ç–∏–∫!"),
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(text='–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑')
                ],
            ],
        resize_keyboard=True
        ),
    )
    return ConversationHandler.END


def help(update, context):
    update.message.reply_text("–°–ø—Ä–∞–≤–∫–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç—É")


def stop(update):
    update.message.reply_text("–°—Ç–æ–ø")
    return ConversationHandler.END


registration_handler = ConversationHandler(

    entry_points=[CommandHandler('start', start)],

    states={
        1: [MessageHandler(Filters.all, check_agreement, pass_user_data=True)],
        2: [MessageHandler(Filters.all, ask_contacts, pass_user_data=True)],
        3: [MessageHandler(Filters.text, check_phone_number, pass_user_data=True)],
        4: [MessageHandler(Filters.text, ask_address, pass_user_data=True)],
    },
    
    fallbacks=[CommandHandler('stop', stop)]
)


constructor_handler = ConversationHandler(
    entry_points = [MessageHandler(Filters.text("–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑"), select_levels)],
    states = {
        5:[MessageHandler(Filters.text, select_shape, pass_user_data=True)],
        6:[MessageHandler(Filters.text, select_toppings, pass_user_data=True)],
        7:[MessageHandler(Filters.text, select_berries, pass_user_data=True)],
        8:[MessageHandler(Filters.text, select_decor, pass_user_data=True)],
        9:[MessageHandler(Filters.text, select_print, pass_user_data=True)],
        10:[MessageHandler(Filters.text, check_print_selection, pass_user_data=True)],
        11:[MessageHandler(Filters.text, save_print, pass_user_data=True)],
        12:[MessageHandler(Filters.text, ask_comment, pass_user_data=True)],
        13:[MessageHandler(Filters.text, save_comment, pass_user_data=True)],
        14:[MessageHandler(Filters.text, check_address, pass_user_data=True)],
        15:[MessageHandler(Filters.text, save_address, pass_user_data=True)],
        16:[MessageHandler(Filters.text, ask_delivery_time, pass_user_data=True)],
    },

    fallbacks=[MessageHandler(Filters.text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), main_menu)]
)


def main():
    load_dotenv()

    token = os.environ['TG_TOKEN']
    bot = Updater(token, use_context=True)
    dp = bot.dispatcher

    dp.add_handler(registration_handler)
    dp.add_handler(constructor_handler)
    dp.add_handler(CommandHandler("help", help))


    bot.start_polling()
    # run the bot until Ctrl-C
    bot.idle()


if __name__ == "__main__":
    main()
