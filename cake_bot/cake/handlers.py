import re
from collections import defaultdict
from dotenv import load_dotenv
from telegram import KeyboardButton, ReplyKeyboardMarkup,\
    ReplyKeyboardRemove
from telegram.ext import CommandHandler, ConversationHandler,\
    Filters, MessageHandler

from cake.serve import *
from cake.models import *

load_dotenv()
users_info = defaultdict()
cakes_info = defaultdict()


SEND_CONTACT_KEYBOARD = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton('–†—É—á–Ω–æ–π –≤–≤–æ–¥'),
            KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç', request_contact=True)
        ]
    ],
    resize_keyboard=True
)

START_KEYBOARD = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text='–°–æ–≥–ª–∞—Å–µ–Ω'),
            KeyboardButton(text='–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω')
        ],
    ],
    resize_keyboard=True
)


def cake_keyboard(user_id):
    if check_client_orders(user_id):
        markup = ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(text='–°–æ–±—Ä–∞—Ç—å —Ç–æ—Ä—Ç'),
                    KeyboardButton(text='üîç –ú–æ–∏ –∑–∞–∫–∞–∑—ã')
                ],
            ],
            resize_keyboard=True
        )
        return markup
    else:
        markup = ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(text='–°–æ–±—Ä–∞—Ç—å —Ç–æ—Ä—Ç'),
                ],
            ],
            resize_keyboard=True
        )
        return markup


def start(update, context):
    message = update.message
    user_name = message.chat.first_name
    user_id = message.chat_id
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥
    database_user_id = Profile.objects.filter(tg_id=user_id)
    if database_user_id.count() == 0:
        context.bot.send_message(
            chat_id=user_id,
            text=(
                f"–ü—Ä–∏–≤–µ—Ç, {user_name}.ü§ö\n\n"
                "–í –Ω–∞—á–∞–ª–µ –Ω–∞—à–µ–≥–æ –æ–±—â–µ–Ω–∏—è —è –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –æ—Ç –≤–∞—Å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º—ã—Ö"
                "–≤–∞–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, —Å —Ü–µ–ª—å—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è.\n\n"
                "–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É '–°–æ–≥–ª–∞—Å–µ–Ω' –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–≤–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∏–º–∏ –≤ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ"
            ),
            reply_markup=START_KEYBOARD,
        )
        context.bot.send_document(
            chat_id=user_id,
            document=open('Agree.pdf', 'rb')
        )
        return 1
    else:
        context.bot.send_message(
            chat_id=user_id,
            text=(
                f"–ü—Ä–∏–≤–µ—Ç, {user_name}.ü§ö\n\n"
                "–î–∞–≤–∞–π—Ç–µ —Å–æ–±–∏—Ä–∞—Ç—å –≤–∞—à —Ç–æ—Ä—Ç!"

            ),
            reply_markup=cake_keyboard(user_id),
        )


def check_agreement(update, context):
    if update.message.text == "–°–æ–≥–ª–∞—Å–µ–Ω":
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=("–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"),
            reply_markup=SEND_CONTACT_KEYBOARD
        )
        return 2
    else:
        update.message.reply_text(
            "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ä–≤–∏—Å–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–µ—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"),
        return 1


def ask_contacts(update, context):
    message = update.message
    user_id = message.chat_id
    users_info[user_id] = get_base_user_info(update)
    if message.contact:
        text = (
            '–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n'
            f'–ò–º—è: {users_info[user_id]["name"]}\n'
            f'–§–∞–º–∏–ª–∏—è: {users_info[user_id]["last_name"]}\n'
            f'–¢–µ–ª–µ—Ñ–æ–Ω: {users_info[user_id]["phone"]}\n'
            'C–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n'
            '–£–ö–ê–ñ–ò–¢–ï –ê–î–†–ï–° –î–û–°–¢–ê–í–ö–ò'
        )
        message.reply_text(
            text,
            reply_markup=ReplyKeyboardRemove()
        )
        return 4

    elif message.text == "–†—É—á–Ω–æ–π –≤–≤–æ–¥":
        context.bot.send_message(
            chat_id=user_id,
            text=('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +71231231212'),
            reply_markup=ReplyKeyboardRemove(),
        )
        users_info[user_id]["phone"] = update.message.text
        return 3


def ask_address(update, context):
    user_id = update.message.chat_id
    address = update.message.text
    if address:
        update.message.reply_text(
            f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏, {address}, —Å–æ—Ö—Ä–∞–Ω–µ–Ω"
        )
        users_info[user_id]["street"] = address
        users_info[user_id]["house_number"] = ''
        users_info[user_id]["flat_number"] = ''
        write_user_to_db(users_info[user_id])
        update.message.reply_text(
            f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫–æ–Ω—á–µ–Ω–∞. –ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å —Å–æ–±–∏—Ä–∞—Ç—å —Ç–æ—Ä—Ç–∏–∫–∏",
            reply_markup=cake_keyboard(user_id)
        )
    return ConversationHandler.END


def check_phone_number(update, context):
    user_id = update.effective_chat.id
    phone_number = update.message.text
    phone_number_valid = re.findall(r'\+?[\d]{1}[\d]{10}', phone_number)
    if phone_number_valid:
        phone_number_valid = phone_number_valid[0]
    if phone_number == phone_number_valid:
        users_info[user_id]['phone'] = phone_number
        context.bot.send_message(
            chat_id=user_id,
            text=(
                '–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n'
                f'–ò–º—è: {users_info[user_id]["name"]}\n'
                f'–§–∞–º–∏–ª–∏—è: {users_info[user_id]["last_name"]}\n'
                f'–¢–µ–ª–µ—Ñ–æ–Ω: {users_info[user_id]["phone"]}\n'
                'C–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n'
                '–£–ö–ê–ñ–ò–¢–ï –ê–î–†–ï–° –î–û–°–¢–ê–í–ö–ò'
            ),
            reply_markup=ReplyKeyboardRemove(),
        )

    else:
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=(
                '–ù–æ–º–µ—Ä –≤–≤–µ–¥–µ–Ω —Å –æ—à–∏–±–∫–æ–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑'
            ),
            reply_markup=SEND_CONTACT_KEYBOARD,
        )
        return 2

    return 4


def select_level(update, context):
    user_id = update.effective_chat.id
    users_info[user_id] = get_user_info_from_db(user_id)
    cakes_info[user_id] = {}

    context.bot.send_message(
        chat_id=user_id,
        text=("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–≤–Ω–µ–π —Ç–æ—Ä—Ç–∏–∫–∞"),
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(text='1 —É—Ä–æ–≤–µ–Ω—å')
                ],
                [
                    KeyboardButton(text='2 —É—Ä–æ–≤–Ω—è')
                ],
                [
                    KeyboardButton(text='3 —É—Ä–æ–≤–Ω—è')
                ],
                [
                    KeyboardButton(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
                ],
            ],
            resize_keyboard=True
        ),
    )

    return 5


def select_shape(update, context):
    user_id = update.effective_chat.id

    if update.message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        update.message.reply_text(
            f'–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è ...',
            reply_markup=cake_keyboard(user_id)
        )
        return ConversationHandler.END
    else:
        cake_level = update.message.text
        cakes_info[user_id]['level'] = cake_level

        context.bot.send_message(
            chat_id=user_id,
            text=("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É"),
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [
                        KeyboardButton(text='–ö–≤–∞–¥—Ä–∞—Ç')
                    ],
                    [
                        KeyboardButton(text='–ö—Ä—É–≥')
                    ],
                    [
                        KeyboardButton(text='–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫')
                    ],
                    [
                        KeyboardButton(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
                    ],
                ],
                resize_keyboard=True
            ),
        )

        return 6


def select_toppings(update, context):
    user_id = update.effective_chat.id
    if update.message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        update.message.reply_text(
            f'–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è ...',
            reply_markup=cake_keyboard(user_id)
        )
        return ConversationHandler.END
    else:
        cake_shape = update.message.text
        cakes_info[user_id]['shape'] = cake_shape

        context.bot.send_message(
            chat_id=user_id,
            text=("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ø–ø–∏–Ω–≥"),
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [
                        KeyboardButton(text='–ë–µ–∑ —Ç–æ–ø–ø–∏–Ω–≥–∞')
                    ],
                    [
                        KeyboardButton(text='–ë–µ–ª—ã–π —Å–æ—É—Å')
                    ],
                    [
                        KeyboardButton(text='–ö–∞—Ä–∞–º–µ–ª—å–Ω—ã–π —Å–∏—Ä–æ–ø')
                    ],
                    [
                        KeyboardButton(text='–ö–ª–µ–Ω–æ–≤—ã–π —Å–∏—Ä–æ–ø')
                    ],
                    [
                        KeyboardButton(text='–ö–ª—É–±–Ω–∏—á–Ω—ã–π —Å–∏—Ä–æ–ø')
                    ],
                    [
                        KeyboardButton(text='–ß–µ—Ä–Ω–∏—á–Ω—ã–π —Å–∏—Ä–æ–ø')
                    ],
                    [
                        KeyboardButton(text='–ú–æ–ª–æ—á–Ω—ã–π —à–æ–∫–æ–ª–∞–¥')
                    ],
                    [
                        KeyboardButton(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
                    ],

                ],
                resize_keyboard=True
            ),
        )
        return 7


def select_berries(update, context):
    user_id = update.effective_chat.id
    if update.message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        update.message.reply_text(
            f'–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è ...',
            reply_markup=cake_keyboard(user_id)
        )
        return ConversationHandler.END
    else:
        cake_topping = update.message.text
        cakes_info[user_id]['topping'] = cake_topping

        context.bot.send_message(
            chat_id=user_id,
            text=("–î–æ–±–∞–≤–∏—Ç—å —è–≥–æ–¥—ã?"),
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [
                        KeyboardButton(text='–ë–µ–∑ —è–≥–æ–¥')
                    ],
                    [
                        KeyboardButton(text='–ï–∂–µ–≤–∏–∫–∞')
                    ],
                    [
                        KeyboardButton(text='–ú–∞–ª–∏–Ω–∞')
                    ],
                    [
                        KeyboardButton(text='–ì–æ–ª—É–±–∏–∫–∞')
                    ],
                    [
                        KeyboardButton(text='–ö–ª—É–±–Ω–∏–∫–∞')
                    ],
                    [
                        KeyboardButton(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
                    ],
                ],
                resize_keyboard=True
            ),
        )
        return 8


def select_decor(update, context):
    user_id = update.effective_chat.id
    if update.message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        update.message.reply_text(
            f'–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è ...',
            reply_markup=cake_keyboard(user_id)
        )
        return ConversationHandler.END
    else:
        cake_berry = update.message.text
        cakes_info[user_id]['berry'] = cake_berry

        context.bot.send_message(
            chat_id=user_id,
            text=("–ö–∞–∫ —É–∫—Ä–∞—Å–∏—Ç—å?"),
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [
                        KeyboardButton(text='–ë–µ–∑ –¥–µ–∫–æ—Ä–∞')
                    ],
                    [
                        KeyboardButton(text='–§–∏—Å—Ç–∞—à–∫–∏')
                    ],
                    [
                        KeyboardButton(text='–ë–µ–∑–µ')
                    ],
                    [
                        KeyboardButton(text='–§—É–Ω–¥—É–∫')
                    ],
                    [
                        KeyboardButton(text='–ü–µ–∫–∞–Ω')
                    ],
                    [
                        KeyboardButton(text='–ú–∞—Ä—à–º–µ–ª–ª–æ—É')
                    ],
                    [
                        KeyboardButton(text='–ú–∞—Ä—Ü–∏–ø–∞–Ω')
                    ],
                    [
                        KeyboardButton(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
                    ],
                ],
                resize_keyboard=True
            ),
        )
        return 9


def select_print(update, context):
    user_id = update.effective_chat.id
    if update.message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        update.message.reply_text(
            f'–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è ...',
            reply_markup=cake_keyboard(user_id)
        )
        return ConversationHandler.END
    else:
        cake_decor = update.message.text
        cakes_info[user_id]['decor'] = cake_decor

        context.bot.send_message(
            chat_id=user_id,
            text=("–ú—ã –º–æ–∂–µ–º —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –Ω–∞ —Ç–æ—Ä—Ç–µ –ª—é–±—É—é –Ω–∞–¥–ø–∏—Å—å, –Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–° –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è!¬ª"),
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [
                        KeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–¥–ø–∏—Å—å')
                    ],
                    [
                        KeyboardButton(text='–ë–µ–∑ –Ω–∞–¥–ø–∏—Å–∏')
                    ],
                    [
                        KeyboardButton(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
                    ],
                ],
                resize_keyboard=True
            ),
        )
        return 10


def check_print_selection(update, context):
    user_id = update.effective_chat.id
    if update.message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        update.message.reply_text(
            f'–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è ...',
            reply_markup=cake_keyboard(user_id)
        )
        return ConversationHandler.END
    else:
        if update.message.text == '–ë–µ–∑ –Ω–∞–¥–ø–∏—Å–∏':
            cakes_info[user_id]['title'] = ''
            context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)"),
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[
                        [
                            KeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π')
                        ],
                        [
                            KeyboardButton(text='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
                        ],
                        [
                            KeyboardButton(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
                        ],
                    ],
                    resize_keyboard=True
                ),
            )
            return 12

        elif update.message.text == '–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–¥–ø–∏—Å—å':
            context.bot.send_message(
                chat_id=user_id,
                text=("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–¥–ø–∏—Å—å:"),
                reply_markup=ReplyKeyboardRemove()
            )
        return 11


def save_print(update, context):
    user_id = update.effective_chat.id
    if update.message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        update.message.reply_text(
            f'–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è ...',
            reply_markup=cake_keyboard(user_id)
        )
        return ConversationHandler.END
    else:
        cake_title = update.message.text
        cakes_info[user_id]['title'] = cake_title

        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)"),
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [
                        KeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π')
                    ],
                    [
                        KeyboardButton(text='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
                    ],
                    [
                        KeyboardButton(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
                    ],
                ],
                resize_keyboard=True
            ),
        )
        return 12


def ask_comment(update, context):
    user_id = update.effective_chat.id
    if update.message.text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        cakes_info[user_id]['comment'] = ''
        address = users_info[user_id]['street']
        context.bot.send_message(
            chat_id=user_id,
            text=(f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ {address}?"),
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [
                        KeyboardButton(text='–î–∞'),
                        KeyboardButton(text='–ù–µ—Ç'),
                    ],
                ],
                resize_keyboard=True
            ),
        )
        return 14
    elif update.message.text == '–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π':
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=("–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"),
            reply_markup=ReplyKeyboardRemove()
        )
        return 13


def save_comment(update, context):
    user_id = update.effective_chat.id

    cake_comment = update.message.text
    cakes_info[user_id]['comment'] = cake_comment
    address = users_info[user_id]['street']
    context.bot.send_message(
        chat_id=user_id,
        text=(f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ {address}?"),
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(text='–î–∞'),
                    KeyboardButton(text='–ù–µ—Ç'),
                ],
            ],
            resize_keyboard=True,
        )
    )
    return 14


def check_address(update, context):
    if update.message.text == "–î–∞":
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text='–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.2021 | –ß–ß:–ú–ú\n'
                 '–ù–∞–ø—Ä–∏–º–µ—Ä 21.11.2021 | 17:00\n'
            ,
            reply_markup=ReplyKeyboardRemove()
        )
        return 16
    elif update.message.text == "–ù–µ—Ç":
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=(f"–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:"),
            reply_markup=ReplyKeyboardRemove()
        )
        return 15


def save_address(update, context):
    user_id = update.effective_chat.id
    users_info[user_id]['street'] = update.message.text
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text='–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.2021 | –ß–ß:–ú–ú'
             '–ù–∞–ø—Ä–∏–º–µ—Ä 21.11.2021 | 17:00\n',
        reply_markup=ReplyKeyboardRemove()
    )
    return 16


def ask_delivery_time(update, context):
    user_id = update.effective_chat.id
    delivery_date = validate_delivery_time(update.message.text)
    if delivery_date:
        cakes_info[user_id]['delivery_date'] = delivery_date
        order_price = get_order_info(cakes_info[user_id])[1]
        if check_fast_delivery(delivery_date):
            order_price = float(order_price)*1.2
        cakes_info[user_id]['price'] = order_price
        context.bot.send_message(
            chat_id=user_id,
            text=(f'–°–£–ú–ú–ê –í–ê–®–ï–ì–û –ó–ê–ö–ê–ó–ê: {order_price}\n'
                  f'–ï—Å—Ç—å –ü–†–û–ú–û–ö–û–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–∏–¥–∏?'),
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [
                        KeyboardButton(text='–í–í–ï–°–¢–ò –ü–†–û–ú–û–ö–û–î'),
                        KeyboardButton(text='–û–§–û–†–ú–ò–¢–¨ –ó–ê–ö–ê–ó'),
                        KeyboardButton(text='–û–¢–ú–ï–ù–ò–¢–¨ –ó–ê–ö–ê–ó'),
                    ],
                ],
                resize_keyboard=True,
            )
        )
        return 18
    else:
        context.bot.send_message(
            chat_id=user_id,
            text=(
                '–î–∞—Ç–∞ –≤–≤–µ–¥–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑'
            ),
        )
        return 16


def apply_promocode(update, context):
    user_id = update.effective_chat.id
    promo = update.message.text
    if promo == 'devman_20':
        price = float(cakes_info[user_id]['price'])*0.8
        cakes_info[user_id]['price'] = price
        context.bot.send_message(
            chat_id=user_id,
            text=f'–ü—Ä–æ–º–æ–∫–æ–¥ –≤–≤–µ–¥–µ–Ω! –ù–æ–≤–∞—è —Ü–µ–Ω–∞ {price}',
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [
                        KeyboardButton(text='–û–§–û–†–ú–ò–¢–¨ –ó–ê–ö–ê–ó'),
                        KeyboardButton(text='–û–¢–ú–ï–ù–ò–¢–¨ –ó–ê–ö–ê–ó'),
                    ],
                ],
                resize_keyboard=True,
            )
        )
        return 18
    else:
        context.bot.send_message(
            chat_id=user_id,
            text=(
                '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑'
            ),
        )
        return 17


def create_order_menu(update, context):
    user_id = update.effective_chat.id
    if update.message.text == "–í–í–ï–°–¢–ò –ü–†–û–ú–û–ö–û–î":
        context.bot.send_message(
            chat_id=user_id,
            text='–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥',
            reply_markup=ReplyKeyboardRemove()
        )
        return 17
    elif update.message.text == "–û–¢–ú–ï–ù–ò–¢–¨ –ó–ê–ö–ê–ó":
        context.bot.send_message(
            chat_id=user_id,
            text='–ó–ê–ö–ê–ó –û–¢–ú–ï–ù–ï–ù!',
            reply_markup=cake_keyboard(user_id)
        )
    elif update.message.text == "–û–§–û–†–ú–ò–¢–¨ –ó–ê–ö–ê–ó":
        create_cake_order(update, context)
        return ConversationHandler.END


def create_cake_order(update, context):
    user_id = update.effective_chat.id
    info = cakes_info[user_id]
    user = users_info[user_id]
    order = create_order(user, info)
    create_cake(order, info)
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f'–ó–ê–ö–ê–ó –û–§–û–†–ú–õ–ï–ù!',
        reply_markup=cake_keyboard(user_id)
    )
    return ConversationHandler.END


def show_orders(update, context):
    user_id = update.effective_chat.id
    client = Profile.objects.get(tg_id=user_id)
    statuses = {i[0]: i[1] for i in Order.ORDER_STATUS}
    if update.message.text == 'üîç –ú–æ–∏ –∑–∞–∫–∞–∑—ã':
        orders = Order.objects.filter(profile=client)

        for order in orders:
            context.bot.send_message(
                chat_id=user_id,
                text=f'–¶–µ–Ω–∞: {order.price}\n'
                     f'–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {order.delivery_date}\n'
                     f'–°—Ç–∞—Ç—É—Å: {statuses[order.status]}',
                reply_markup=cake_keyboard(user_id),
            )


def help(update, context):
    update.message.reply_text("–°–ø—Ä–∞–≤–∫–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç—É")


def stop(update):
    update.message.reply_text("–°—Ç–æ–ø")
    return ConversationHandler.END


registration_handler = ConversationHandler(

    entry_points=[CommandHandler('start', start)],

    states={
        1: [MessageHandler(Filters.all, check_agreement, pass_user_data=True)],
        2: [MessageHandler(Filters.all, ask_contacts, pass_user_data=True)],
        3: [MessageHandler(Filters.text, check_phone_number, pass_user_data=True)],
        4: [MessageHandler(Filters.text, ask_address, pass_user_data=True)]
    },

    fallbacks=[CommandHandler('stop', stop)]
)

constructor_handler = ConversationHandler(
    entry_points=[MessageHandler(Filters.text("–°–æ–±—Ä–∞—Ç—å —Ç–æ—Ä—Ç"), select_level)],
    states={
        5: [MessageHandler(Filters.text, select_shape, pass_user_data=True)],
        6: [MessageHandler(Filters.text, select_toppings, pass_user_data=True)],
        7: [MessageHandler(Filters.text, select_berries, pass_user_data=True)],
        8: [MessageHandler(Filters.text, select_decor, pass_user_data=True)],
        9: [MessageHandler(Filters.text, select_print, pass_user_data=True)],
        10: [MessageHandler(Filters.text, check_print_selection, pass_user_data=True)],
        11: [MessageHandler(Filters.text, save_print, pass_user_data=True)],
        12: [MessageHandler(Filters.text, ask_comment, pass_user_data=True)],
        13: [MessageHandler(Filters.text, save_comment, pass_user_data=True)],
        14: [MessageHandler(Filters.text, check_address, pass_user_data=True)],
        15: [MessageHandler(Filters.text, save_address, pass_user_data=True)],
        16: [MessageHandler(Filters.text, ask_delivery_time, pass_user_data=True)],
        17: [MessageHandler(Filters.text, apply_promocode, pass_user_data=True)],
        18: [MessageHandler(Filters.text, create_order_menu, pass_user_data=True)],
    },


    fallbacks=[CommandHandler('stop', stop)]
)