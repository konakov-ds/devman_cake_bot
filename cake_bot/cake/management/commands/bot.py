import os
from django.core.management.base import BaseCommand
from cake.models import *
from cake.serve import *
from cake.handlers import registration_handler, constructor_handler, show_orders, help
from django.core.files import File
from telegram import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, Update, user
from telegram.ext import ConversationHandler, MessageHandler, CommandHandler, Updater, Filters, CallbackContext
from dotenv import load_dotenv

load_dotenv()
token = os.getenv('TELEGRAM_TOKEN')


class Command(BaseCommand):

    def handle(self, *args, **kwargs):
        updater = Updater(token, use_context=True)
        dispatcher = updater.dispatcher

        dispatcher.add_handler(registration_handler)
        dispatcher.add_handler(constructor_handler)
        dispatcher.add_handler(MessageHandler(filters=Filters.text, callback=show_orders))
        dispatcher.add_handler(CommandHandler("help", help))

        updater.start_polling()
        updater.idle()


# def main_keyboard(user_id):
#     database_user_id = Profile.objects.filter(tg_id=user_id)
#     if database_user_id.count() > 0:
#         markup = ReplyKeyboardMarkup(
#             keyboard=[
#                 [
#                     KeyboardButton(text='‚úÖ –°–æ–±—Ä–∞—Ç—å —Ç–æ—Ä—Ç'),
#                     KeyboardButton(text='üîç –ú–æ–∏ –∑–∞–∫–∞–∑—ã')
#                 ],
#             ],
#             resize_keyboard=True
#         )
#         return markup
#     else:
#         markup = ReplyKeyboardMarkup(
#             keyboard=[
#                 [
#                     KeyboardButton(text='‚úÖ –î–∞—é —Å–æ–≥–ª–∞—Å–∏–µ', request_contact=True),
#                 ],
#             ],
#             resize_keyboard=True
#         )
#         return markup


# def start_bot(update, context):
#     user_id = update.effective_chat.id
#     context.bot.send_message(
#         chat_id=update.effective_chat.id,
#         text=('–ü—Ä–∏–≤–µ—Ç!\n'
#               '–Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞—à–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ç–æ—Ä—Ç–∞!\n\n'
#               '–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –º–Ω–µ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç –≤–∞—Å\n'
#               '—Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.'),
#         reply_markup=main_keyboard(user_id),
#     )
#     context.bot.send_document(
#         chat_id=update.effective_chat.id,
#         document=open('agree.pdf', 'rb'),
#         filename='–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö'
#     )
#     #print(create_order(update))
#     print(create_cake({
#         'level': '2 —É—Ä–æ–≤–Ω—è',
#         'shape': '–ö—Ä—É–≥',
#         'topping': '–ß–µ—Ä–Ω–∏—á–Ω—ã–π —Å–∏—Ä–æ–ø'
#     }, 1))


# def cancel_handler(update, context):
#     if update.message.text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å':
#         user_id = update.effective_chat.id
#         context.bot.send_message(
#             chat_id=update.effective_chat.id,
#             text=f'–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≤–µ—â–∏. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start',
#             reply_markup=main_keyboard(user_id)
#         )
#         return ConversationHandler.END